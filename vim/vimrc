" Automatically install missing plugins on startup
autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif

call plug#begin('~/.vim/plugged')
" Nerdtree
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

" Color schemes
Plug 'morhetz/gruvbox'
Plug 'chriskempson/tomorrow-theme'

" Powerline alternative
Plug 'vim-airline/vim-airline'

" Jedi to Python autocompletion
Plug 'davidhalter/jedi-vim'

" Automatically sort python imports
Plug 'fisadev/vim-isort'

" Better autocompletion
Plug 'Shougo/neocomplcache.vim'

" fugitive.vim: a Git wrapper so awesome, it should be illegal
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'

" Auto Pairsby by MIAO JIANG
Plug 'jiangmiao/auto-pairs'

" Finder for Vim.
Plug 'kien/ctrlp.vim'
Plug 'rking/ag.vim'

" Vim motions on speed!
Plug 'easymotion/vim-easymotion'

" Black
Plug 'ambv/black'

" Python-mode
" Plug 'python-mode/python-mode', {'branch': 'develop'}

call plug#end()

" Custom settings
syntax on
colorscheme gruvbox
set background=dark
set encoding=utf-8

"Mode Settings
let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[3 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)

"Cursor settings:
"  1 -> blinking block
"  2 -> solid block
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar

" VCS tracker settings
set updatetime=400
let g:signify_vcs_list = [ 'git', 'hg' ]
let g:signify_realtime = 1

" mappings:
imap jk <esc>
let g:mapleader = "\<Space>"
" easymotion
map  <Leader> <Plug>(easymotion-prefix)
map  f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

" NerdTree settings
" base bindings: https://stackoverflow.com/a/25254470/9501552
let NERDTreeShowHidden=1
let NERDTreeIgnore = ['\.pyc$', '\.git$', '\.swp$', '\~$', '\.idea$']
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
" vcs jumping
nmap gj <plug>(signify-next-hunk)
nmap gk <plug>(signify-prev-hunk)

" save as sudo
ca w!! w !sudo tee "%"

" line numbers & tabs to spaces
set number
set expandtab 

" backgroun search words
set hlsearch
set incsearch

" Enable folding
set foldmethod=indent
set foldlevel=99

" Python specific wraps & indents
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

" HTML, JS, CSS specific settings
au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |

" Syntastic ------------------------------
" show list of errors and warnings on the current file
nmap <leader>e :Errors<CR>
" check also when just opened the file
let g:syntastic_check_on_open = 1
" don't put icons on the sign column (it hides the vcs status icons of signify)
let g:syntastic_enable_signs = 1
" custom icons (enable them if you use a patched font, and enable the previous
" setting)
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'

" Jedi-vim ------------------------------
" All these mappings work only for python code:
" Go to definition
let g:jedi#goto_command = ',d'
" Find ocurrences
let g:jedi#usages_command = ',o'
" Find assignments
let g:jedi#goto_assignments_command = ',a'
" Go to definition in new tab
nmap ,D :tab split<CR>:call jedi#goto()<CR>

" NeoComplCache ------------------------------
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_ignore_case = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_auto_select = 1
let g:neocomplcache_enable_fuzzy_completion = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_fuzzy_completion_start_length = 1
let g:neocomplcache_auto_completion_start_length = 1
let g:neocomplcache_manual_completion_start_length = 1
let g:neocomplcache_min_keyword_length = 1
let g:neocomplcache_min_syntax_length = 1
" complete with workds from any opened file
let g:neocomplcache_same_filetype_lists = {}
let g:neocomplcache_same_filetype_lists._ = '_'

" Black settings
let g:black_linelength=79 

" >>> Python-mode settings
" TODO fix indents
let g:pymode_rope = 1
let g:pymode_rope_autoimport=1
let g:pymode_python = 'python3'

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
 
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" syntax highlighting
let g:pymode_syntax = 0

" Don't autofold code
let g:pymode_folding = 0

" Run Python Code
let g:pymode_run = 1
let g:pymode_rope_goto_definition_bind = "<C-]>"
let g:pymode_run_bind = "<C-b>"

